# PROBLEM
#
# Each new term in the Fibonacci sequence is generated by adding the previous two terms.
# By starting with 1 and 2, the first 10 terms will be:
# 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
# By considering the terms in the Fibonacci sequence whose values do not exceed four million,
# find the sum of the even-valued terms.

# PSEUDO
#
# create a loop that generates fibonacci nums
# as it iterates, check if the value is even w/ modulo
# if it is, add to list, sum list at end

# ANOTHER WAY
# every third fib value is even, so just add every 3rd


def even_fibonacci():
    # define starting values
    n1 = 1
    n2 = 2

    #initiate list with just 2
    evens = [2]

    while True:
        nc = n2 + n1
        print(f'nc = {nc}')
        if nc > 4000000:
            break
            # exit loop if num is greater than 4000000
        elif nc % 2 == 0:
            evens.append(nc)
            # add to list if even

        #update values for next iteration
        n1 = n2
        n2 = nc

    print(evens)
    return sum(evens)

print(even_fibonacci())
